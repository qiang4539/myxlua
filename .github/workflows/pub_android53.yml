name: pub android53

on: 
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install NDK
        run: |
          cd ~
          wget -O NDK -q https://dl.google.com/android/repository/android-ndk-r28c-linux.zip
          sudo apt install unzip -y
          unzip -q NDK
          ANDROID_NDK_HOME=$(pwd)/android-ndk-r28c
      - name: Build with 16KB alignment
        run: |
          sudo chmod ugo+rwx -R ./
          export ANDROID_NDK_HOME=~/android-ndk-r28c
          
          # 创建支持16KB对齐的构建脚本
          cat > make_android_lua53_16kb.sh << 'EOF'
          #!/bin/bash
          
          if [ -n "$ANDROID_NDK" ]; then
              export NDK=${ANDROID_NDK}
          elif [ -n "$ANDROID_NDK_HOME" ]; then
              export NDK=${ANDROID_NDK_HOME}
          else
              export NDK=~/android-ndk-r28c
          fi
          
          if [ ! -d "$NDK" ]; then
              echo "Please set ANDROID_NDK environment to the root of NDK."
              exit 1
          fi
          
          function build() {
              API=$1
              ABI=$2
              TOOLCHAIN_NAME=$3
              BUILD_PATH=build.Android.${ABI}
              
              echo "Building $ABI with 16KB alignment..."
              
              # 设置16KB对齐的编译标志
              export CFLAGS="-fmax-page-size=16384"
              export CXXFLAGS="-fmax-page-size=16384"
              export LDFLAGS="-Wl,-z,max-page-size=16384 -Wl,-z,common-page-size=16384"
              
              # 对于arm64-v8a，添加额外的对齐标志
              if [ "$ABI" = "arm64-v8a" ]; then
                  export CFLAGS="$CFLAGS -falign-functions=16384"
                  export CXXFLAGS="$CXXFLAGS -falign-functions=16384"
                  export LDFLAGS="$LDFLAGS -Wl,--section-alignment=16384"
              fi
              
              cmake -H. -B${BUILD_PATH} \
                  -DANDROID_ABI=${ABI} \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_TOOLCHAIN_FILE=${NDK}/build/cmake/android.toolchain.cmake \
                  -DANDROID_NATIVE_API_LEVEL=${API} \
                  -DANDROID_TOOLCHAIN=clang \
                  -DANDROID_TOOLCHAIN_NAME=${TOOLCHAIN_NAME} \
                  -DCMAKE_C_FLAGS="$CFLAGS" \
                  -DCMAKE_CXX_FLAGS="$CXXFLAGS" \
                  -DCMAKE_EXE_LINKER_FLAGS="$LDFLAGS" \
                  -DCMAKE_SHARED_LINKER_FLAGS="$LDFLAGS"
              
              cmake --build ${BUILD_PATH} --config Release
              
              mkdir -p plugin_lua53/Plugins/Android/libs/${ABI}/
              cp ${BUILD_PATH}/libxlua.so plugin_lua53/Plugins/Android/libs/${ABI}/libxlua.so
              
              # 验证16KB对齐
              echo "Verifying 16KB alignment for $ABI:"
              readelf -l ${BUILD_PATH}/libxlua.so | grep -A 1 "LOAD" || echo "No LOAD segments found"
              readelf -S ${BUILD_PATH}/libxlua.so | grep -E "\.(text|data|rodata)" || echo "No sections found"
          }
          
          build android-35 armeabi-v7a arm-linux-androideabi-4.9
          build android-35 arm64-v8a arm-linux-androideabi-clang
          build android-35 x86 x86-4.9
          EOF
          
          chmod +x make_android_lua53_16kb.sh
          ./make_android_lua53_16kb.sh
          
      - name: Verify 16KB alignment
        run: |
          echo "=== Final verification of 16KB alignment ==="
          for file in $(find ./plugin_lua53 -name "*.so"); do
              echo "=== Checking: $file ==="
              readelf -l "$file" | grep -E "(LOAD|Align)" || echo "No alignment info found"
              echo "Page size alignment:"
              readelf -l "$file" | awk '/LOAD/ {getline; print "  " $0}' || echo "No page info found"
              echo "---"
          done
          
      - name: Upload53
        uses: actions/upload-artifact@v4
        with:
          path: ./plugin_lua53/**/*
          name: plugin_lua53
  publish:
    runs-on: ubuntu-latest
    needs: [android]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: plugin_lua53
          path: plugin_lua53/
      - name: Create Release Asset
        run: |
          cd plugin_lua53/ && tar cvfz ../lua53_fixFileDescriptor.tgz Plugins && cd -
      - name: Delete existing release if exists
        run: |
          gh release delete fixFileDescriptor --yes || true
          git tag -d fixFileDescriptor || true
          git push --delete origin fixFileDescriptor || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: fixFileDescriptor
          name: "fixFileDescriptor Release"
          draft: false
          prerelease: false
          files: ./lua53_fixFileDescriptor.tgz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
